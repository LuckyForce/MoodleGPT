{"version":3,"file":"MoodleGPT.js","sources":["../src/utils/title-indications.ts","../src/utils/logs.ts","../src/utils/normalize-text.ts","../src/utils/html-table-to-string.ts","../src/core/questions/radio-checkbox.ts","../src/core/questions/select.ts","../src/core/questions/textbox.ts","../src/core/questions/clipboard.ts","../src/core/questions/number.ts","../src/core/questions/contenteditable.ts","../src/core/reply.ts","../src/core/create-question.ts","../src/core/get-response.ts","../src/core/code-listener.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Show some informations into the document title and remove it after 3000ms\r\n * @param text\r\n */\r\nfunction titleIndications(text: string) {\r\n  const backTitle = document.title;\r\n  document.title = text;\r\n  setTimeout(() => (document.title = backTitle), 3000);\r\n}\r\n\r\nexport default titleIndications;\r\n","import GPTAnswer from \"@typing/gptAnswer\";\r\n\r\nclass Logs {\r\n  static question(text: string) {\r\n    const css = \"color: cyan\";\r\n    console.log(\"%c[QUESTION]: %s\", css, text);\r\n  }\r\n\r\n  static responseTry(text: string, valide: boolean) {\r\n    const css = \"color: \" + (valide ? \"green\" : \"red\");\r\n    console.log(\"%c[CHECKING]: %s\", css, text);\r\n  }\r\n\r\n  static array(arr: unknown[]) {\r\n    console.log(\"[CORRECTS] \", arr);\r\n  }\r\n\r\n  static response(gptAnswer: GPTAnswer) {\r\n    console.log(\"Original:\\n\" + gptAnswer.response);\r\n    console.log(\"Normalized:\\n\" + gptAnswer.normalizedResponse);\r\n  }\r\n}\r\n\r\nexport default Logs;\r\n","/**\r\n * Normlize text\r\n * @param text\r\n */\r\nfunction normalizeText(text: string, toLowerCase: boolean = true) {\r\n  let normalizedText = text\r\n    .replace(/\\n+/gi, \"\\n\") //remove duplicate new lines\r\n    .replace(/(\\n\\s*\\n)+/g, \"\\n\") //remove useless white sapce from textcontent\r\n    .replace(/[ \\t]+/gi, \" \"); //replace multiples space or tabs by a space\r\n\r\n  if (toLowerCase) normalizedText = normalizedText.toLowerCase();\r\n\r\n  return (\r\n    normalizedText\r\n      .trim()\r\n      /* We remove that because sometimes ChatGPT will reply: \"answer d\" */\r\n      .replace(/^[a-z\\d]\\.\\s/gi, \"\") //a. text, b. text, c. text, 1. text, 2. text, 3.text\r\n      .replace(/\\n[a-z\\d]\\.\\s/gi, \"\\n\") //same but with new line\r\n  );\r\n}\r\n\r\nexport default normalizeText;\r\n","/**\r\n * Convert table to representating string table\r\n * @param table\r\n * @returns\r\n */\r\nfunction htmlTableToString(table: HTMLTableElement) {\r\n  const tab: string[][] = [];\r\n  const lines = Array.from(table.querySelectorAll(\"tr\"));\r\n  const maxColumnsLength: number[] = [];\r\n  lines.map((line) => {\r\n    const cells = Array.from(line.querySelectorAll(\"td, th\"));\r\n    const cellsContent = cells.map((cell, index) => {\r\n      const content = cell.textContent?.trim();\r\n      maxColumnsLength[index] = Math.max(\r\n        maxColumnsLength[index] || 0,\r\n        content.length || 0\r\n      );\r\n      return content;\r\n    });\r\n    tab.push(cellsContent);\r\n  });\r\n\r\n  const lineSeparationSize =\r\n    maxColumnsLength.reduce((a, b) => a + b) + tab[0].length * 3 + 1;\r\n  const lineSeparation =\r\n    \"\\n\" + Array(lineSeparationSize).fill(\"-\").join(\"\") + \"\\n\";\r\n\r\n  const mappedTab = tab.map((line) => {\r\n    const mappedLine = line.map((content, index) =>\r\n      content.padEnd(\r\n        maxColumnsLength[index],\r\n        \"\\u00A0\" /* For no matching with \\s */\r\n      )\r\n    );\r\n    return \"| \" + mappedLine.join(\" | \") + \" |\";\r\n  });\r\n  const head = mappedTab.shift();\r\n  return head + lineSeparation + mappedTab.join(\"\\n\");\r\n}\r\n\r\nexport default htmlTableToString;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\nimport Logs from \"@utils/logs\";\r\nimport normalizeText from \"@utils/normalize-text\";\r\n\r\n/**\r\n * Handle checkbox and input elements\r\n * @param config\r\n * @param inputList\r\n * @param gptAnswer\r\n */\r\nfunction handleRadioAndCheckbox(\r\n  config: Config,\r\n  inputList: NodeListOf<HTMLElement>,\r\n  gptAnswer: GPTAnswer\r\n): boolean {\r\n  const input = inputList?.[0] as HTMLInputElement;\r\n\r\n  if (!input || (input.type !== \"checkbox\" && input.type !== \"radio\"))\r\n    return false;\r\n\r\n  for (const input of inputList as NodeListOf<HTMLInputElement>) {\r\n    const content = normalizeText(input.parentNode.textContent);\r\n    const valide = gptAnswer.normalizedResponse.includes(content);\r\n    if (config.logs) Logs.responseTry(content, valide);\r\n    if (valide) {\r\n      if (config.mouseover) {\r\n        input.addEventListener(\"mouseover\", () => (input.checked = true), {\r\n          once: true,\r\n        });\r\n      } else {\r\n        input.checked = true;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default handleRadioAndCheckbox;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\nimport Logs from \"@utils/logs\";\r\nimport normalizeText from \"@utils/normalize-text\";\r\n\r\n/**\r\n * Handle select elements (and put in order select)\r\n * @param config\r\n * @param inputList\r\n * @param gptAnswer\r\n * @returns\r\n */\r\nfunction handleSelect(\r\n  config: Config,\r\n  inputList: NodeListOf<HTMLElement>,\r\n  gptAnswer: GPTAnswer\r\n): boolean {\r\n  if (inputList.length === 0 || inputList[0].tagName !== \"SELECT\") return false;\r\n\r\n  let correct = gptAnswer.normalizedResponse.split(\"\\n\");\r\n\r\n  if (config.logs) Logs.array(correct);\r\n\r\n  /**\r\n   * Sometimes ChatGPT give the question so we should remove them\r\n   * Example:\r\n   * 5*5\r\n   * 25\r\n   * 10+10\r\n   * 20\r\n   * 20-10\r\n   * 10\r\n   *\r\n   * And we only want to keep answers\r\n   * 25\r\n   * 20\r\n   * 10\r\n   */\r\n  if (correct.length === inputList.length * 2) {\r\n    correct = correct.filter((answer, index) => index % 2 === 1);\r\n  }\r\n\r\n  for (let j = 0; j < inputList.length; ++j) {\r\n    const options = inputList[j].querySelectorAll(\"option\");\r\n\r\n    for (const option of options) {\r\n      const content = normalizeText(option.textContent);\r\n      const valide = correct[j].includes(content);\r\n\r\n      /* Handle put in order question */\r\n      if (!/[^\\d]+/gi.test(content)) {\r\n        const elementTitle = (option.parentNode as HTMLElement)\r\n          .closest(\"tr\")\r\n          .querySelector(\".text\");\r\n        const content = normalizeText(elementTitle.textContent);\r\n\r\n        const indexCorrectAnswer = correct.findIndex((answer) => {\r\n          const valide = answer.includes(content);\r\n          if (config.logs) Logs.responseTry(content, valide);\r\n          return valide;\r\n        });\r\n\r\n        if (indexCorrectAnswer !== -1) {\r\n          //we do + 1 because we skip the first option: Choose...\r\n          if (config.mouseover) {\r\n            options[indexCorrectAnswer + 1].closest(\"select\").addEventListener(\r\n              \"click\",\r\n              function () {\r\n                options[indexCorrectAnswer + 1].selected = \"selected\" as any;\r\n              },\r\n              { once: true }\r\n            );\r\n          } else {\r\n            options[indexCorrectAnswer + 1].selected = \"selected\" as any;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      /* End */\r\n\r\n      if (config.logs) Logs.responseTry(content, valide);\r\n\r\n      if (valide) {\r\n        if (config.mouseover) {\r\n          option\r\n            .closest(\"select\")\r\n            .addEventListener(\"click\", () => (option.selected = true), {\r\n              once: true,\r\n            });\r\n        } else {\r\n          option.selected = true;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default handleSelect;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\n\r\n/**\r\n * Handle textbox\r\n * @param config\r\n * @param inputList\r\n * @param gptAnswer\r\n * @returns\r\n */\r\nfunction handleTextbox(\r\n  config: Config,\r\n  inputList: NodeListOf<HTMLElement>,\r\n  gptAnswer: GPTAnswer\r\n): boolean {\r\n  const input = inputList[0] as HTMLInputElement | HTMLTextAreaElement;\r\n\r\n  if (\r\n    inputList.length !== 1 ||\r\n    (input.tagName !== \"TEXTAREA\" && input.type !== \"text\")\r\n  )\r\n    return false;\r\n\r\n  if (config.typing) {\r\n    let index = 0;\r\n    input.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n      if (event.key === \"Backspace\") index = gptAnswer.response.length + 1;\r\n      if (index > gptAnswer.response.length) return;\r\n      event.preventDefault();\r\n      input.value = gptAnswer.response.slice(0, ++index);\r\n    });\r\n  } else {\r\n    input.value = gptAnswer.response;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default handleTextbox;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\nimport titleIndications from \"@utils/title-indications\";\r\n\r\n/**\r\n * Copy the response in the clipboard if we can automaticaly fill the question\r\n * @param config\r\n * @param gptAnswer\r\n */\r\nfunction handleClipboard(config: Config, gptAnswer: GPTAnswer) {\r\n  if (config.title) titleIndications(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(gptAnswer.response);\r\n}\r\n\r\nexport default handleClipboard;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\n\r\n/**\r\n * Handle number input\r\n * @param config\r\n * @param inputList\r\n * @param gptAnswer\r\n * @returns\r\n */\r\nfunction handleNumber(\r\n  config: Config,\r\n  inputList: NodeListOf<HTMLElement>,\r\n  gptAnswer: GPTAnswer\r\n): boolean {\r\n  const input = inputList[0] as HTMLInputElement | HTMLTextAreaElement;\r\n\r\n  if (inputList.length !== 1 || input.type !== \"number\") return false;\r\n\r\n  const number = gptAnswer.normalizedResponse\r\n    .match(/\\d+([,\\.]\\d+)?/gi)?.[0]\r\n    ?.replace(\",\", \".\");\r\n\r\n  if (!number) return false;\r\n\r\n  if (config.typing) {\r\n    let index = 0;\r\n    input.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n      if (event.key === \"Backspace\") index = number.length + 1;\r\n      if (index > number.length) return;\r\n      event.preventDefault();\r\n      if (number.slice(index, index + 1) === \".\") ++index;\r\n      input.value = number.slice(0, ++index);\r\n    });\r\n  } else {\r\n    input.value = number;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default handleNumber;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\n\r\n/**\r\n * Hanlde contenteditable elements\r\n * @param config\r\n * @param inputList\r\n * @param gptAnswer\r\n * @returns\r\n */\r\nfunction handleContentEditable(\r\n  config: Config,\r\n  inputList: NodeListOf<HTMLElement>,\r\n  gptAnswer: GPTAnswer\r\n): boolean {\r\n  const input = inputList[0];\r\n\r\n  if (\r\n    inputList.length !== 1 ||\r\n    input.getAttribute(\"contenteditable\") !== \"true\"\r\n  )\r\n    return false;\r\n\r\n  if (config.typing) {\r\n    let index = 0;\r\n    input.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n      if (event.key === \"Backspace\") index = gptAnswer.response.length + 1;\r\n      if (index > gptAnswer.response.length) return;\r\n      event.preventDefault();\r\n      input.textContent = gptAnswer.response.slice(0, ++index);\r\n\r\n      /* Put the cursor at the end of the typed text */\r\n      input.focus();\r\n      const range = document.createRange();\r\n      range.selectNodeContents(input);\r\n      range.collapse(false);\r\n      const selection = window.getSelection();\r\n      selection.removeAllRanges();\r\n      selection.addRange(range);\r\n    });\r\n  } else {\r\n    input.textContent = gptAnswer.response;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default handleContentEditable;\r\n","import type Config from \"@typing/config\";\r\nimport Logs from \"@utils/logs\";\r\nimport getChatGPTResponse from \"./get-response\";\r\nimport createQuestion from \"./create-question\";\r\nimport handleRadioAndCheckbox from \"./questions/radio-checkbox\";\r\nimport handleSelect from \"./questions/select\";\r\nimport handleTextbox from \"./questions/textbox\";\r\nimport handleClipboard from \"./questions/clipboard\";\r\nimport handleNumber from \"./questions/number\";\r\nimport handleContentEditable from \"./questions/contenteditable\";\r\nimport { removeListener } from \"./code-listener\";\r\n\r\n/**\r\n * Reply to the question\r\n * @param config\r\n * @param hiddenButton\r\n * @param form\r\n * @param query\r\n * @returns\r\n */\r\nasync function reply(\r\n  config: Config,\r\n  hiddenButton: HTMLElement,\r\n  form: HTMLElement,\r\n  query: string\r\n) {\r\n  if (config.cursor) hiddenButton.style.cursor = \"wait\";\r\n\r\n  const question = createQuestion(config, form);\r\n  const inputList: NodeListOf<HTMLElement> = form.querySelectorAll(query);\r\n\r\n  const gptAnswer = await getChatGPTResponse(config, question).catch(\r\n    (error) => ({\r\n      error,\r\n    })\r\n  );\r\n\r\n  const haveError = typeof gptAnswer === \"object\" && \"error\" in gptAnswer;\r\n\r\n  if (config.cursor)\r\n    hiddenButton.style.cursor =\r\n      config.infinite || haveError ? \"pointer\" : \"initial\";\r\n\r\n  if (haveError) {\r\n    console.error(gptAnswer.error);\r\n    return;\r\n  }\r\n\r\n  if (config.logs) {\r\n    Logs.question(question);\r\n    Logs.response(gptAnswer);\r\n  }\r\n\r\n  /* Handle clipboard mode */\r\n  if (config.mode === \"clipboard\") {\r\n    if (!config.infinite) removeListener(hiddenButton);\r\n    return handleClipboard(config, gptAnswer);\r\n  }\r\n\r\n  /* Handle question to answer mode */\r\n  if (config.mode === \"question-to-answer\") {\r\n    removeListener(hiddenButton);\r\n\r\n    const questionContainer = form.querySelector<HTMLElement>(\".qtext\");\r\n    const questionBackup = questionContainer.textContent;\r\n\r\n    questionContainer.textContent = gptAnswer.response;\r\n    questionContainer.style.whiteSpace = \"pre-wrap\";\r\n\r\n    questionContainer.addEventListener(\"click\", function () {\r\n      const isNotResponse = questionContainer.textContent === questionBackup;\r\n      questionContainer.style.whiteSpace = isNotResponse ? \"pre-wrap\" : null;\r\n      questionContainer.textContent = isNotResponse\r\n        ? gptAnswer.response\r\n        : questionBackup;\r\n    });\r\n    return;\r\n  }\r\n\r\n  /* Better then set once on the event because if there is an error the user can click an other time on the question */\r\n  if (!config.infinite) removeListener(hiddenButton);\r\n\r\n  const handlers = [\r\n    handleContentEditable,\r\n    handleTextbox,\r\n    handleNumber,\r\n    handleSelect,\r\n    handleRadioAndCheckbox,\r\n  ];\r\n\r\n  for (const handler of handlers) {\r\n    if (handler(config, inputList, gptAnswer)) return;\r\n  }\r\n\r\n  /* In the case we can't auto complete the question */\r\n  handleClipboard(config, gptAnswer);\r\n}\r\n\r\nexport default reply;\r\n","import type Config from \"@typing/config\";\r\nimport normalizeText from \"@utils/normalize-text\";\r\nimport htmlTableToString from \"@utils/html-table-to-string\";\r\n\r\n/**\r\n * Normalize the question and add sub informations\r\n * @param langage\r\n * @param question\r\n * @returns\r\n */\r\nfunction createQuestion(config: Config, questionContainer: HTMLElement) {\r\n  let question = questionContainer.innerText;\r\n\r\n  /* We remove unnecessary information */\r\n  const accesshideElements: NodeListOf<HTMLElement> =\r\n    questionContainer.querySelectorAll(\".accesshide\");\r\n  for (const useless of accesshideElements) {\r\n    question = question.replace(useless.innerText, \"\");\r\n  }\r\n\r\n  /* Make tables more readable for chat-gpt */\r\n  const tables: NodeListOf<HTMLTableElement> =\r\n    questionContainer.querySelectorAll(\".qtext table\");\r\n  for (const table of tables) {\r\n    question = question.replace(\r\n      table.innerText,\r\n      \"\\n\" + htmlTableToString(table) + \"\\n\"\r\n    );\r\n  }\r\n\r\n  return normalizeText(question, false);\r\n}\r\n\r\nexport default createQuestion;\r\n","import type Config from \"@typing/config\";\r\nimport type GPTAnswer from \"@typing/gptAnswer\";\r\nimport normalizeText from \"@utils/normalize-text\";\r\n\r\n/**\r\n * Get the response from chatGPT api\r\n * @param config\r\n * @param question\r\n * @returns\r\n */\r\nasync function getChatGPTResponse(\r\n  config: Config,\r\n  question: string\r\n): Promise<GPTAnswer> {\r\n  const controller = new AbortController();\r\n  const timeoutControler = setTimeout(() => controller.abort(), 15000);\r\n  const req = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${config.apiKey}`,\r\n    },\r\n    signal: config.timeout ? controller.signal : null,\r\n    body: JSON.stringify({\r\n      model: config.model,\r\n      messages: [\r\n        {\r\n          role: \"system\",\r\n          content: `\r\nFollow those rules:\r\n- Sometimes there won't be a question, so just answer the statement as you normally would without following the other rules and give the most detailled and complete answer with explication.\r\n- For put in order question just give the good order separate by new line\r\n- Your goal is to understand the statement and to reply to each question by giving only the answer.\r\n- You will keep the same order for the answers like in the text. \r\n- You will separate all the answer with new lines and only show the correctes one.\r\n- You will only give the answers for each question and omit the questions, statement, title or other informations from the response.\r\n- You will only give answer with exactly the same text as the gived answers.\r\n- The question always have the good answer so you should always give an answer to the question.\r\n- You will always respond in the same langage as the user question.`,\r\n        },\r\n        { role: \"user\", content: question },\r\n      ],\r\n      temperature: 0.8,\r\n      top_p: 1.0,\r\n      presence_penalty: 1.0,\r\n      stop: null,\r\n    }),\r\n  });\r\n  clearTimeout(timeoutControler);\r\n  const rep = await req.json();\r\n  const response = rep.choices[0].message.content;\r\n  return {\r\n    response,\r\n    normalizedResponse: normalizeText(response),\r\n  };\r\n}\r\n\r\nexport default getChatGPTResponse;\r\n","import type Config from \"@typing/config\";\r\nimport titleIndications from \"@utils/title-indications\";\r\nimport reply from \"./reply\";\r\n\r\ntype Listener = {\r\n  element: HTMLElement;\r\n  fn: (this: HTMLElement, ev: MouseEvent) => any;\r\n};\r\n\r\nconst pressedKeys: string[] = [];\r\nconst listeners: Listener[] = [];\r\n\r\n/**\r\n * Create a listener on the keyboard to inject the code\r\n * @param config\r\n */\r\nfunction codeListener(config: Config) {\r\n  document.body.addEventListener(\"keydown\", function (event) {\r\n    pressedKeys.push(event.key);\r\n    if (pressedKeys.length > config.code.length) pressedKeys.shift();\r\n    if (pressedKeys.join(\"\") === config.code) {\r\n      pressedKeys.length = 0;\r\n      setUpMoodleGpt(config);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Setup moodleGPT into the page (remove/injection)\r\n * @param config\r\n * @returns\r\n */\r\nfunction setUpMoodleGpt(config: Config) {\r\n  /* Removing events */\r\n  if (listeners.length > 0) {\r\n    for (const listener of listeners) {\r\n      if (config.cursor) listener.element.style.cursor = \"initial\";\r\n      listener.element.removeEventListener(\"click\", listener.fn);\r\n    }\r\n    if (config.title) titleIndications(\"Removed\");\r\n    listeners.length = 0;\r\n    return;\r\n  }\r\n\r\n  /* Code injection */\r\n  const inputQuery = [\"checkbox\", \"radio\", \"text\", \"number\"]\r\n    .map((e) => `input[type=\"${e}\"]`)\r\n    .join(\",\");\r\n  const query = inputQuery + \", textarea, select, [contenteditable]\";\r\n  const forms = document.querySelectorAll(\".formulation\");\r\n\r\n  for (const form of forms) {\r\n    const hiddenButton: HTMLElement = form.querySelector(\".qtext\");\r\n\r\n    if (!hiddenButton) continue;\r\n\r\n    if (config.cursor) hiddenButton.style.cursor = \"pointer\";\r\n\r\n    const injectionFunction = reply.bind(\r\n      null,\r\n      config,\r\n      hiddenButton,\r\n      form,\r\n      query\r\n    );\r\n    listeners.push({ element: hiddenButton, fn: injectionFunction });\r\n    hiddenButton.addEventListener(\"click\", injectionFunction);\r\n  }\r\n\r\n  if (config.title) titleIndications(\"Injected\");\r\n}\r\n\r\n/**\r\n * Remove the event listener on a specific question\r\n * @param element\r\n */\r\nfunction removeListener(element: HTMLElement) {\r\n  const index = listeners.findIndex((listener) => listener.element === element);\r\n  if (index !== -1) {\r\n    const listener = listeners.splice(index, 1)[0];\r\n    listener.element.removeEventListener(\"click\", listener.fn);\r\n  }\r\n}\r\n\r\nexport { codeListener, removeListener, setUpMoodleGpt };\r\n","import type Config from \"@typing/config\";\r\nimport { codeListener, setUpMoodleGpt } from \"./core/code-listener\";\r\n\r\nchrome.storage.sync.get([\"moodleGPT\"]).then(function (storage) {\r\n  const config: Config = storage.moodleGPT;\r\n\r\n  if (!config) throw new Error(\"Please configure MoodleGPT into the extension\");\r\n\r\n  if (config.code) {\r\n    codeListener(config);\r\n  } else {\r\n    setUpMoodleGpt(config);\r\n  }\r\n});\r\n"],"names":["titleIndications","text","backTitle","document","title","setTimeout","Logs","question","console","log","responseTry","valide","css","array","arr","response","gptAnswer","normalizedResponse","normalizeText","toLowerCase","normalizedText","replace","trim","htmlTableToString","table","tab","lines","Array","from","querySelectorAll","maxColumnsLength","map","line","cellsContent","cell","index","content","_a","textContent","Math","max","length","push","lineSeparationSize","reduce","a","b","lineSeparation","fill","join","mappedTab","padEnd","shift","handleRadioAndCheckbox","config","inputList","input","type","parentNode","includes","logs","mouseover","addEventListener","checked","once","handleSelect","tagName","correct","split","filter","answer","j","options","option","test","closest","querySelector","indexCorrectAnswer","findIndex","selected","handleTextbox","typing","event","key","preventDefault","value","slice","handleClipboard","navigator","clipboard","writeText","handleNumber","number","_b","match","handleContentEditable","getAttribute","focus","range","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","reply","hiddenButton","form","query","cursor","style","questionContainer","innerText","accesshideElements","useless","tables","createQuestion","controller","AbortController","timeoutControler","abort","req","fetch","method","headers","Authorization","apiKey","signal","timeout","body","JSON","stringify","model","messages","role","temperature","top_p","presence_penalty","stop","clearTimeout","json","choices","message","getChatGPTResponse","catch","error","haveError","infinite","mode","removeListener","questionBackup","whiteSpace","isNotResponse","handlers","handler","pressedKeys","listeners","setUpMoodleGpt","listener","element","removeEventListener","fn","e","forms","injectionFunction","bind","splice","chrome","storage","sync","get","then","moodleGPT","Error","code","codeListener"],"mappings":"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"}