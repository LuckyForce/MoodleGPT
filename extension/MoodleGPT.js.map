{"version":3,"file":"MoodleGPT.js","sources":["../src/utils/title-indications.ts","../node_modules/tslib/tslib.es6.js","../src/utils/pick-best-response.ts","../src/utils/logs.ts","../src/utils/normalize-text.ts","../src/utils/version-support-images.ts","../src/core/get-response.ts","../src/utils/image-to-base64.ts","../src/utils/html-table-to-string.ts","../src/core/questions/clipboard.ts","../src/core/questions/contenteditable.ts","../src/core/questions/number.ts","../src/core/questions/radio.ts","../src/core/questions/checkbox.ts","../src/core/questions/select.ts","../src/core/questions/textbox.ts","../src/core/reply.ts","../src/core/create-question.ts","../src/core/modes/clipboard.ts","../src/core/modes/question-to-answer.ts","../src/core/modes/autocomplete.ts","../src/core/code-listener.ts","../src/index.ts"],"sourcesContent":["/**\n * Show some informations into the document title and remove it after 3000ms\n * @param text\n */\nfunction titleIndications(text: string) {\n  const backTitle = document.title;\n  document.title = text;\n  setTimeout(() => (document.title = backTitle), 3000);\n}\n\nexport default titleIndications;\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","type BestResponse = {\n  similarity: number;\n  value: string | null;\n  element: HTMLElement | null;\n};\n\ntype ResponsesBySimilarity = {\n  similarity: number;\n  value: string;\n  element: HTMLElement;\n};\n\n/**\n * Calculate the levenshtein distance between two sentence\n * @param str1\n * @param str2\n * @returns\n */\nfunction levenshteinDistance(str1: string, str2: string) {\n  if (str1.length === 0) return str2.length;\n  if (str2.length === 0) return str1.length;\n\n  const matrix: number[][] = [];\n  const str1WithoutSpaces = str1.replace(/\\s+/, '');\n  const str2WithoutSpaces = str2.replace(/\\s+/, '');\n\n  for (let i = 0; i <= str1WithoutSpaces.length; ++i) {\n    matrix.push([i]);\n    for (let j = 1; j <= str2WithoutSpaces.length; ++j) {\n      matrix[i][j] =\n        i === 0\n          ? j\n          : Math.min(\n              matrix[i - 1][j] + 1,\n              matrix[i][j - 1] + 1,\n              matrix[i - 1][j - 1] + (str1WithoutSpaces[i - 1] === str2WithoutSpaces[j - 1] ? 0 : 1)\n            );\n    }\n  }\n\n  return matrix[str1WithoutSpaces.length][str2WithoutSpaces.length];\n}\n\n/**\n * Calculate the similarity between two sentences from 0 to 1 (best)\n * @param str1\n * @param str2\n * @returns\n */\nfunction sentenceSimilarity(str1: string, str2: string) {\n  const longerLength = str1.length > str2.length ? str1.length : str2.length;\n  if (longerLength === 0) return 1;\n  return (longerLength - levenshteinDistance(str1, str2)) / longerLength;\n}\n\n/**\n * Pick the best sentence that correspond to the answer\n * @param arr\n * @param answer\n * @returns\n */\nexport function pickBestReponse(\n  answer: string,\n  arr: { element: HTMLElement; value: string }[]\n): BestResponse {\n  let bestResponse: BestResponse = {\n    element: null,\n    similarity: 0,\n    value: null\n  };\n  for (const obj of arr) {\n    const similarity = sentenceSimilarity(obj.value, answer);\n    if (similarity === 1) {\n      return { element: obj.element, value: obj.value, similarity };\n    }\n    if (similarity > bestResponse.similarity) {\n      bestResponse = { element: obj.element, value: obj.value, similarity };\n    }\n  }\n  return bestResponse;\n}\n\n/**\n * Return the sentences sorted by score with a score superior or equal to what is asked\n * @param answer\n * @param arr\n * @param score\n * @returns\n */\nexport function pickResponsesWithSimilarityGreaterThan(\n  answer: string,\n  arr: { element: HTMLElement; value: string }[],\n  score: number\n): ResponsesBySimilarity[] {\n  const responses: ResponsesBySimilarity[] = [];\n  for (const obj of arr) {\n    const similarity = sentenceSimilarity(obj.value, answer);\n    if (similarity >= score)\n      responses.push({\n        similarity,\n        value: obj.value,\n        element: obj.element\n      });\n  }\n  return responses.sort((a, b) => a.similarity - b.similarity);\n}\n\n/**\n * Convert a number to a readable string pourcentage\n * @param similarity\n */\nexport function toPourcentage(similarity: number): string {\n  return Math.round(similarity * 100 * 100) / 100 + '%';\n}\n","import GPTAnswer from '@typing/gptAnswer';\nimport { toPourcentage } from './pick-best-response';\n\nclass Logs {\n  static question(text: string) {\n    const css = 'color: cyan';\n    console.log('%c[QUESTION]: %s', css, text);\n  }\n\n  static bestAnswer(answer: string, similarity: number) {\n    const css = 'color: green';\n    console.log(\n      '%c[BEST ANSWER]: %s',\n      css,\n      `\"${answer}\" with a similarity of ${toPourcentage(similarity)}`\n    );\n  }\n\n  static array(arr: unknown[]) {\n    console.log('[CORRECTS] ', arr);\n  }\n\n  static response(gptAnswer: GPTAnswer) {\n    console.log('Original:\\n' + gptAnswer.response);\n    console.log('Normalized:\\n' + gptAnswer.normalizedResponse);\n  }\n}\n\nexport default Logs;\n","/**\n * Normlize text\n * @param text\n */\nfunction normalizeText(text: string, toLowerCase: boolean = true) {\n  if (toLowerCase) text = text.toLowerCase();\n\n  const normalizedText = text\n    .replace(/\\n+/gi, '\\n') //remove duplicate new lines\n    .replace(/(\\n\\s*\\n)+/g, '\\n') //remove useless white space from textcontent\n    .replace(/[ \\t]+/gi, ' ') //replace multiples space or tabs by a space\n    .trim()\n    // We remove the following content because sometimes ChatGPT will reply: \"answer d\"\n    .replace(/^[a-z\\d]\\.\\s/gi, '') //a. text, b. text, c. text, 1. text, 2. text, 3.text\n    .replace(/\\n[a-z\\d]\\.\\s/gi, '\\n'); //same but with new line\n\n  return normalizedText;\n}\n\nexport default normalizeText;\n","/**\r\n * Check if the current ChatGPT version is greater or equal to 4\r\n * @param version\r\n * @returns\r\n */\r\nfunction isGPTModelGreaterOrEqualTo4(version: string): boolean {\r\n  const versionNumber = version.match(/gpt-(\\d+)/);\r\n  if (!versionNumber?.[1]) {\r\n    return false;\r\n  }\r\n  return Number(versionNumber[1]) >= 4;\r\n}\r\n\r\nexport default isGPTModelGreaterOrEqualTo4;\r\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport imageToBase64 from '@utils/image-to-base64';\nimport normalizeText from '@utils/normalize-text';\nimport isGPTModelGreaterOrEqualTo4 from '@utils/version-support-images';\n\ntype Content =\n  | string\n  | Array<\n      | {\n          type: CONTENT_TYPE.TEXT;\n          text: string;\n        }\n      | {\n          type: CONTENT_TYPE.IMAGE;\n          image_url: { url: string };\n        }\n    >;\n\ntype History = {\n  url: string | null;\n  system: { role: ROLE; content: Content };\n  history: { role: ROLE; content: Content }[];\n};\n\nenum ROLE {\n  SYSTEM = 'system',\n  USER = 'user',\n  ASSISTANT = 'assistant'\n}\n\nenum CONTENT_TYPE {\n  TEXT = 'text',\n  IMAGE = 'image_url'\n}\n\nconst INSTRUCTION: string = `\nAct as a quiz solver for the best notation with the following rules:\n- When asked for the result of an equation, provide only the result without any other information and skip the other rules.\n- If no answer(s) are given, answer the statement as usual without following the other rules, providing the most detailed, complete and precise explanation.\n- For 'put in order' questions, provide the position of the answer separated by a new line (e.g., '1\\n3\\n2') and ignore other rules.- Always reply in this format: '<answer 1>\\n<answer 2>\\n...'\n- Always reply in the format: '<answer 1>\\n<answer 2>\\n...'.\n- Retain only the correct answer(s).\n- Maintain the same order for the answers as in the text.\n- Retain all text from the answer with its description, content or definition.\n- Only provide answers that exactly match the given answer in the text.\n- The question always has the correct answer(s), so you should always provide an answer.\n- Always respond in the same language as the user's question.\n`.trim();\n\nconst history: History = {\n  url: null,\n  system: {\n    role: ROLE.SYSTEM,\n    content: INSTRUCTION\n  },\n  history: []\n};\n\n/**\n * Get the content to send to ChatGPT API (it allows to includes images if supported)\n * @param config\n */\nasync function getContent(\n  config: Config,\n  questionElement: HTMLElement,\n  question: string\n): Promise<Content> {\n  const imagesElements = questionElement.querySelectorAll('img');\n\n  if (\n    config.includeImages &&\n    isGPTModelGreaterOrEqualTo4(config.model) &&\n    imagesElements.length === 0\n  ) {\n    return question;\n  }\n\n  let content: Content = [];\n\n  const base64Images = Array.from(imagesElements).map(imgEl => imageToBase64(imgEl));\n  const results = await Promise.all(base64Images);\n  const filteredResults = results.filter(value => value !== null) as string[];\n\n  for (const result of filteredResults) {\n    content.push({\n      type: CONTENT_TYPE.IMAGE,\n      image_url: { url: result }\n    });\n  }\n\n  if (content.length > 0) {\n    content.push({\n      type: CONTENT_TYPE.TEXT,\n      text: question\n    });\n  } else {\n    content = question;\n  }\n\n  return content;\n}\n\n/**\n * Get the response from chatGPT api\n * @param config\n * @param question\n * @returns\n */\nasync function getChatGPTResponse(\n  config: Config,\n  questionElement: HTMLElement,\n  question: string\n): Promise<GPTAnswer> {\n  const URL = location.hostname + location.pathname;\n\n  // We reset the history when we enter a new moodle quiz or when it's desactivate\n  if (!config.history || history.url !== URL) {\n    history.url = URL;\n    history.history = [];\n  }\n\n  const controller = new AbortController();\n  const timeoutControler = setTimeout(() => controller.abort(), 15 * 1000);\n\n  const content = await getContent(config, questionElement, question);\n  const message = { role: ROLE.USER, content };\n\n  const req = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${config.apiKey}`\n    },\n    signal: config.timeout ? controller.signal : null,\n    body: JSON.stringify({\n      model: config.model,\n      messages: [history.system, ...history.history, message],\n      temperature: 0.8,\n      top_p: 1.0,\n      presence_penalty: 1.0,\n      ...(isGPTModelGreaterOrEqualTo4(config.model) ? { max_tokens: 1000 } : { stop: null }) // look like that on 3.5 we can say stop do null but not on gpt >= 4\n    })\n  });\n\n  clearTimeout(timeoutControler);\n\n  const rep = await req.json();\n  const response = rep.choices[0].message.content;\n\n  // Register the conversation\n  if (config.history) {\n    history.history.push(message);\n    history.history.push({ role: ROLE.ASSISTANT, content: response });\n  }\n\n  return {\n    question,\n    response,\n    normalizedResponse: normalizeText(response)\n  };\n}\n\nexport default getChatGPTResponse;\n","/**\r\n * Convert an image html element into a base64 image string\r\n * @param imageElement\r\n * @returns\r\n */\r\nfunction imageToBase64(imageElement: HTMLImageElement): Promise<string | null> {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    if (!ctx) {\r\n      resolve(null);\r\n      return;\r\n    }\r\n\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.onload = () => {\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      ctx.drawImage(img, 0, 0);\r\n\r\n      const base64 = canvas.toDataURL('image/png');\r\n      resolve(base64);\r\n    };\r\n    img.onerror = error => {\r\n      reject(error);\r\n    };\r\n\r\n    img.src = imageElement.src;\r\n  });\r\n}\r\n\r\nexport default imageToBase64;\r\n","/**\n * Convert table to representating string table\n * @param table\n * @returns\n */\nfunction htmlTableToString(table: HTMLTableElement) {\n  const tab: string[][] = [];\n  const lines = Array.from(table.querySelectorAll('tr'));\n  const maxColumnsLength: number[] = [];\n  lines.map(line => {\n    const cells = Array.from(line.querySelectorAll('td, th'));\n    const cellsContent = cells.map((cell, index) => {\n      const content = cell.textContent?.trim();\n      maxColumnsLength[index] = Math.max(maxColumnsLength[index] || 0, content?.length || 0);\n      return content ?? '';\n    });\n    tab.push(cellsContent);\n  });\n\n  const lineSeparationSize = maxColumnsLength.reduce((a, b) => a + b) + tab[0].length * 3 + 1;\n  const lineSeparation = '\\n' + Array(lineSeparationSize).fill('-').join('') + '\\n';\n\n  const mappedTab = tab.map(line => {\n    const mappedLine = line.map((content, index) =>\n      content.padEnd(\n        maxColumnsLength[index],\n        '\\u00A0' // For no matching with \\s\n      )\n    );\n    return '| ' + mappedLine.join(' | ') + ' |';\n  });\n  const head = mappedTab.shift();\n  return head + lineSeparation + mappedTab.join('\\n');\n}\n\nexport default htmlTableToString;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport titleIndications from '@utils/title-indications';\n\n/**\n * Copy the response in the clipboard if we can automaticaly fill the question\n * @param config\n * @param gptAnswer\n */\nfunction handleClipboard(config: Config, gptAnswer: GPTAnswer) {\n  if (config.title) titleIndications('Copied to clipboard');\n  navigator.clipboard.writeText(gptAnswer.response);\n}\n\nexport default handleClipboard;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\n\n/**\n * Hanlde contenteditable elements\n * @param config\n * @param inputList\n * @param gptAnswer\n * @returns\n */\nfunction handleContentEditable(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  const input = inputList[0];\n\n  if (\n    inputList.length !== 1 || // for now we don't handle many input for editable textcontent\n    input.getAttribute('contenteditable') !== 'true'\n  ) {\n    return false;\n  }\n\n  if (config.typing) {\n    let index = 0;\n    input.addEventListener('keydown', function (event: KeyboardEvent) {\n      if (event.key === 'Backspace') index = gptAnswer.response.length + 1;\n      if (index > gptAnswer.response.length) return;\n      event.preventDefault();\n      input.textContent = gptAnswer.response.slice(0, ++index);\n\n      // Put the cursor at the end of the typed text\n      input.focus();\n      const range = document.createRange();\n      range.selectNodeContents(input);\n      range.collapse(false);\n      const selection = window.getSelection();\n      if (selection !== null) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    });\n  } else {\n    input.textContent = gptAnswer.response;\n  }\n\n  return true;\n}\n\nexport default handleContentEditable;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\n\n/**\n * Handle number input\n * @param config\n * @param inputList\n * @param gptAnswer\n * @returns\n */\nfunction handleNumber(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  const input = inputList[0] as HTMLInputElement | HTMLTextAreaElement;\n\n  if (\n    inputList.length !== 1 || // for now we don't handle many input number\n    input.type !== 'number'\n  ) {\n    return false;\n  }\n\n  const number = gptAnswer.normalizedResponse.match(/\\d+([,.]\\d+)?/gi)?.[0]?.replace(',', '.');\n\n  if (number === undefined) return false;\n\n  if (config.typing) {\n    let index = 0;\n    input.addEventListener('keydown', function (event: Event) {\n      event.preventDefault();\n      if ((<KeyboardEvent>event).key === 'Backspace') index = number.length + 1;\n      if (index > number.length) return;\n      if (number.slice(index, index + 1) === '.') ++index;\n      input.value = number.slice(0, ++index);\n    });\n  } else {\n    input.value = number;\n  }\n\n  return true;\n}\n\nexport default handleNumber;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport Logs from '@utils/logs';\nimport normalizeText from '@utils/normalize-text';\nimport { pickBestReponse } from '@utils/pick-best-response';\n\n/**\n * Handle input radio elements\n * @param config\n * @param inputList\n * @param gptAnswer\n */\nfunction handleRadio(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  const firstInput = inputList?.[0] as HTMLInputElement;\n\n  // Handle the case the input is not a radio\n  if (!firstInput || firstInput.type !== 'radio') {\n    return false;\n  }\n\n  const possibleAnswers = Array.from(inputList)\n    .map(inp => ({\n      element: inp,\n      value: normalizeText(inp?.parentElement?.textContent ?? '')\n    }))\n    .filter(obj => obj.value !== '');\n\n  const bestAnswer = pickBestReponse(gptAnswer.normalizedResponse, possibleAnswers);\n\n  if (config.logs && bestAnswer.value) {\n    Logs.bestAnswer(bestAnswer.value, bestAnswer.similarity);\n  }\n\n  const correctInput = bestAnswer.element as HTMLInputElement;\n  if (config.mouseover) {\n    correctInput.addEventListener('mouseover', () => (correctInput.checked = true), {\n      once: true\n    });\n  } else {\n    correctInput.checked = true;\n  }\n\n  return true;\n}\n\nexport default handleRadio;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport Logs from '@utils/logs';\nimport normalizeText from '@utils/normalize-text';\nimport { pickBestReponse } from '@utils/pick-best-response';\n\n/**\n * Handle input checkbox elements\n * @param config\n * @param inputList\n * @param gptAnswer\n */\nfunction handleCheckbox(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  const firstInput = inputList?.[0] as HTMLInputElement;\n\n  // Handle the case the input is not a checkbox\n  if (!firstInput || firstInput.type !== 'checkbox') {\n    return false;\n  }\n\n  const corrects = gptAnswer.normalizedResponse.split('\\n');\n\n  const possibleAnswers = Array.from(inputList)\n    .map(inp => ({\n      element: inp,\n      value: normalizeText(inp?.parentElement?.textContent ?? '')\n    }))\n    .filter(obj => obj.value !== '');\n\n  for (const correct of corrects) {\n    const bestAnswer = pickBestReponse(correct, possibleAnswers);\n\n    if (config.logs && bestAnswer.value) {\n      Logs.bestAnswer(bestAnswer.value, bestAnswer.similarity);\n    }\n\n    const correctInput = bestAnswer.element as HTMLInputElement;\n    if (config.mouseover) {\n      correctInput.addEventListener('mouseover', () => (correctInput.checked = true), {\n        once: true\n      });\n    } else {\n      correctInput.checked = true;\n    }\n  }\n\n  return true;\n}\n\nexport default handleCheckbox;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport Logs from '@utils/logs';\nimport normalizeText from '@utils/normalize-text';\nimport { pickBestReponse } from '@utils/pick-best-response';\n\n/**\n * Handle select elements (and put in order select)\n * @param config\n * @param inputList\n * @param gptAnswer\n * @returns\n */\nfunction handleSelect(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  if (inputList.length === 0 || inputList[0].tagName !== 'SELECT') return false;\n\n  const corrects = gptAnswer.normalizedResponse.split('\\n');\n\n  if (config.logs) Logs.array(corrects);\n\n  for (let i = 0; i < inputList.length; ++i) {\n    if (!corrects[i]) break;\n\n    const options = inputList[i].querySelectorAll('option');\n\n    const possibleAnswers = Array.from(options)\n      .map(opt => ({\n        element: opt,\n        value: normalizeText(opt.textContent ?? '')\n      }))\n      .filter(obj => obj.value !== '');\n\n    const bestAnswer = pickBestReponse(corrects[i], possibleAnswers);\n\n    if (config.logs && bestAnswer.value) {\n      Logs.bestAnswer(bestAnswer.value, bestAnswer.similarity);\n    }\n\n    const correctOption = bestAnswer.element as HTMLOptionElement;\n    const currentSelect = correctOption.closest('select');\n\n    if (currentSelect === null) continue;\n\n    if (config.mouseover) {\n      currentSelect.addEventListener('click', () => (correctOption.selected = true), {\n        once: true\n      });\n    } else {\n      correctOption.selected = true;\n    }\n  }\n\n  return true;\n}\n\nexport default handleSelect;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\n\n/**\n * Handle textbox\n * @param config\n * @param inputList\n * @param gptAnswer\n * @returns\n */\nfunction handleTextbox(\n  config: Config,\n  inputList: NodeListOf<HTMLElement>,\n  gptAnswer: GPTAnswer\n): boolean {\n  const input = inputList[0] as HTMLInputElement | HTMLTextAreaElement;\n\n  if (\n    inputList.length !== 1 || // for now we don't handle many input text\n    (input.tagName !== 'TEXTAREA' && input.type !== 'text')\n  ) {\n    return false;\n  }\n\n  if (config.typing) {\n    let index = 0;\n    input.addEventListener('keydown', function (event: Event) {\n      event.preventDefault();\n      if ((<KeyboardEvent>event).key === 'Backspace') {\n        index = gptAnswer.response.length + 1;\n      }\n      if (index > gptAnswer.response.length) return;\n      input.value = gptAnswer.response.slice(0, ++index);\n    });\n  } else {\n    input.value = gptAnswer.response;\n  }\n\n  return true;\n}\n\nexport default handleTextbox;\n","import type Config from '@typing/config';\nimport Logs from '@utils/logs';\nimport getChatGPTResponse from './get-response';\nimport createAndNormalizeQuestion from './create-question';\nimport clipboardMode from './modes/clipboard';\nimport questionToAnswerMode from './modes/question-to-answer';\nimport autoCompleteMode from './modes/autocomplete';\n\ntype Props = {\n  config: Config;\n  questionElement: HTMLElement;\n  form: HTMLElement;\n  inputQuery: string;\n  removeListener: () => void;\n};\n\n/**\n * Reply to the question\n * @param props\n * @returns\n */\nasync function reply(props: Props): Promise<void> {\n  if (props.config.cursor) props.questionElement.style.cursor = 'wait';\n\n  const question = createAndNormalizeQuestion(props.form);\n  const inputList: NodeListOf<HTMLElement> = props.form.querySelectorAll(props.inputQuery);\n\n  const gptAnswer = await getChatGPTResponse(props.config, props.questionElement, question).catch(\n    error => ({\n      error\n    })\n  );\n\n  const haveError = typeof gptAnswer === 'object' && 'error' in gptAnswer;\n\n  if (props.config.cursor) {\n    props.questionElement.style.cursor = props.config.infinite || haveError ? 'pointer' : 'initial';\n  }\n\n  if (haveError) {\n    console.error(gptAnswer.error);\n    return;\n  }\n\n  if (props.config.logs) {\n    Logs.question(question);\n    Logs.response(gptAnswer);\n  }\n\n  switch (props.config.mode) {\n    case 'clipboard':\n      clipboardMode({\n        config: props.config,\n        questionElement: props.questionElement,\n        gptAnswer,\n        removeListener: props.removeListener\n      });\n      break;\n    case 'question-to-answer':\n      questionToAnswerMode({\n        gptAnswer,\n        questionElement: props.questionElement,\n        removeListener: props.removeListener\n      });\n      break;\n    case 'autocomplete':\n      autoCompleteMode({\n        config: props.config,\n        gptAnswer,\n        inputList,\n        questionElement: props.questionElement,\n        removeListener: props.removeListener\n      });\n      break;\n  }\n}\n\nexport default reply;\n","import normalizeText from '@utils/normalize-text';\nimport htmlTableToString from '@utils/html-table-to-string';\n\n/**\n * Normalize the question as text and add sub informations\n * @param langage\n * @param question\n * @returns\n */\nfunction createAndNormalizeQuestion(questionContainer: HTMLElement) {\n  let question = questionContainer.innerText;\n\n  // We remove unnecessary information\n  const accesshideElements: NodeListOf<HTMLElement> =\n    questionContainer.querySelectorAll('.accesshide');\n  for (const useless of accesshideElements) {\n    question = question.replace(useless.innerText, '');\n  }\n\n  // Make tables more readable for chat-gpt\n  const tables: NodeListOf<HTMLTableElement> = questionContainer.querySelectorAll('.qtext table');\n  for (const table of tables) {\n    question = question.replace(table.innerText, '\\n' + htmlTableToString(table) + '\\n');\n  }\n\n  return normalizeText(question, false);\n}\n\nexport default createAndNormalizeQuestion;\n","import type Config from '@typing/config';\nimport type GPTAnswer from '@typing/gptAnswer';\nimport handleClipboard from '@core/questions/clipboard';\n\ntype Props = {\n  config: Config;\n  questionElement: HTMLElement;\n  gptAnswer: GPTAnswer;\n  removeListener: () => void;\n};\n\n/**\n * Clipboard mode:\n * Simply copy the answer into the clipboard\n * @param props\n */\nfunction clipboardMode(props: Props) {\n  if (!props.config.infinite) props.removeListener();\n  handleClipboard(props.config, props.gptAnswer);\n}\n\nexport default clipboardMode;\n","import type GPTAnswer from '@typing/gptAnswer';\n\ntype Props = {\n  questionElement: HTMLElement;\n  gptAnswer: GPTAnswer;\n  removeListener: () => void;\n};\n\n/**\n * Question to answer mode:\n * Simply turn the question into the answer by clicking on it\n * @param props\n */\nfunction questionToAnswerMode(props: Props) {\n  const questionElement = props.questionElement;\n\n  props.removeListener();\n\n  const questionBackup = questionElement.textContent;\n\n  questionElement.textContent = props.gptAnswer.response;\n\n  // Format the content\n  questionElement.style.whiteSpace = 'pre-wrap';\n\n  // To go back to the question / answer\n  let contentIsResponse = true;\n  questionElement.addEventListener('click', function () {\n    questionElement.style.whiteSpace = contentIsResponse ? '' : 'pre-warp';\n    questionElement.textContent = contentIsResponse ? questionBackup : props.gptAnswer.response;\n\n    contentIsResponse = !contentIsResponse;\n  });\n}\n\nexport default questionToAnswerMode;\n","import type GPTAnswer from '@typing/gptAnswer';\nimport type Config from '@typing/config';\nimport handleClipboard from '@core/questions/clipboard';\nimport handleContentEditable from '@core/questions/contenteditable';\nimport handleNumber from '@core/questions/number';\nimport handleRadio from '@core/questions/radio';\nimport handleCheckbox from '@core/questions/checkbox';\nimport handleSelect from '@core/questions/select';\nimport handleTextbox from '@core/questions/textbox';\n\ntype Props = {\n  config: Config;\n  questionElement: HTMLElement;\n  inputList: NodeListOf<HTMLElement>;\n  gptAnswer: GPTAnswer;\n  removeListener: () => void;\n};\n\n/**\n * Autocomplete mode:\n * Autocomplete the question by checking the good answer\n * @param props\n * @returns\n */\nfunction autoCompleteMode(props: Props) {\n  if (!props.config.infinite) props.removeListener();\n\n  const handlers = [\n    handleContentEditable,\n    handleTextbox,\n    handleNumber,\n    handleSelect,\n    handleRadio,\n    handleCheckbox\n  ];\n\n  for (const handler of handlers) {\n    if (handler(props.config, props.inputList, props.gptAnswer)) return;\n  }\n\n  // In the case we can't auto complete the question\n  handleClipboard(props.config, props.gptAnswer);\n}\n\nexport default autoCompleteMode;\n","import type Config from '@typing/config';\nimport titleIndications from '@utils/title-indications';\nimport reply from './reply';\n\ntype Listener = {\n  element: HTMLElement;\n  fn: (this: HTMLElement, ev: MouseEvent) => void;\n};\n\nconst pressedKeys: string[] = [];\nconst listeners: Listener[] = [];\n\n/**\n * Create a listener on the keyboard to inject the code\n * @param config\n */\nfunction codeListener(config: Config) {\n  document.body.addEventListener('keydown', function (event) {\n    pressedKeys.push(event.key);\n    if (pressedKeys.length > config.code!.length) pressedKeys.shift();\n    if (pressedKeys.join('') === config.code) {\n      pressedKeys.length = 0;\n      setUpMoodleGpt(config);\n    }\n  });\n}\n\n/**\n * Remove the event listener on a specific question\n * @param element\n */\nfunction removeListener(element: HTMLElement) {\n  const index = listeners.findIndex(listener => listener.element === element);\n  if (index !== -1) {\n    const listener = listeners.splice(index, 1)[0];\n    listener.element.removeEventListener('click', listener.fn);\n  }\n}\n\n/**\n * Setup moodleGPT into the page (remove/injection)\n * @param config\n * @returns\n */\nfunction setUpMoodleGpt(config: Config) {\n  // Removing events if there are already declared\n  if (listeners.length > 0) {\n    for (const listener of listeners) {\n      if (config.cursor) listener.element.style.cursor = 'initial';\n      listener.element.removeEventListener('click', listener.fn);\n    }\n    if (config.title) titleIndications('Removed');\n    listeners.length = 0;\n    return;\n  }\n\n  // Query to find inputs and forms\n  const inputTypeQuery = ['checkbox', 'radio', 'text', 'number']\n    .map(e => `input[type=\"${e}\"]`)\n    .join(',');\n  const inputQuery = inputTypeQuery + ', textarea, select, [contenteditable]';\n  const forms = document.querySelectorAll('.formulation');\n\n  // For each form we inject a function on the queqtion\n  for (const form of forms) {\n    const questionElement: HTMLElement | null = form.querySelector('.qtext');\n\n    if (questionElement === null) continue;\n\n    if (config.cursor) questionElement.style.cursor = 'pointer';\n\n    const injectionFunction = reply.bind(null, {\n      config,\n      questionElement,\n      form: form as HTMLElement,\n      inputQuery,\n      removeListener: () => removeListener(questionElement)\n    });\n\n    listeners.push({ element: questionElement, fn: injectionFunction });\n    questionElement.addEventListener('click', injectionFunction);\n  }\n\n  if (config.title) titleIndications('Injected');\n}\n\nexport { codeListener, removeListener, setUpMoodleGpt };\n","import type Config from '@typing/config';\nimport { codeListener, setUpMoodleGpt } from './core/code-listener';\n\nchrome.storage.sync.get(['moodleGPT']).then(function (storage) {\n  const config: Config = storage.moodleGPT;\n\n  if (!config) throw new Error('Please configure MoodleGPT into the extension');\n\n  if (config.code) {\n    codeListener(config);\n  } else {\n    setUpMoodleGpt(config);\n  }\n});\n"],"names":["titleIndications","text","backTitle","document","title","setTimeout","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","sentenceSimilarity","str1","str2","longerLength","length","matrix","str1WithoutSpaces","replace","str2WithoutSpaces","i","push","j","Math","min","levenshteinDistance","pickBestReponse","answer","arr","bestResponse","element","similarity","obj","SuppressedError","Logs","question","console","log","bestAnswer","round","toPourcentage","array","response","gptAnswer","normalizedResponse","normalizeText","toLowerCase","trim","isGPTModelGreaterOrEqualTo4","version","versionNumber","match","Number","ROLE","CONTENT_TYPE","INSTRUCTION","history","url","system","role","SYSTEM","content","getContent","config","questionElement","imagesElements","querySelectorAll","includeImages","model","base64Images","Array","from","map","imgEl","imageToBase64","imageElement","canvas","createElement","ctx","getContext","img","Image","crossOrigin","onload","width","height","drawImage","base64","toDataURL","onerror","error","src","filteredResults","all","filter","type","IMAGE","image_url","TEXT","htmlTableToString","table","tab","lines","maxColumnsLength","line","cellsContent","cell","index","_a","textContent","max","lineSeparationSize","reduce","a","b","lineSeparation","fill","join","mappedTab","padEnd","shift","handleClipboard","navigator","clipboard","writeText","handleContentEditable","inputList","input","getAttribute","typing","addEventListener","event","key","preventDefault","slice","focus","range","createRange","selectNodeContents","collapse","selection","window","getSelection","removeAllRanges","addRange","handleNumber","number","_b","undefined","handleRadio","firstInput","possibleAnswers","inp","parentElement","logs","correctInput","mouseover","checked","once","handleCheckbox","corrects","split","correct","handleSelect","tagName","options","opt","correctOption","currentSelect","closest","selected","handleTextbox","reply","props","cursor","style","questionContainer","innerText","accesshideElements","useless","tables","createAndNormalizeQuestion","form","inputQuery","URL","location","hostname","pathname","controller","AbortController","timeoutControler","abort","message","USER","req","fetch","method","headers","Authorization","apiKey","signal","timeout","body","JSON","stringify","Object","assign","messages","temperature","top_p","presence_penalty","max_tokens","stop","clearTimeout","json","choices","ASSISTANT","getChatGPTResponse","catch","haveError","infinite","mode","removeListener","clipboardMode","questionBackup","whiteSpace","contentIsResponse","questionToAnswerMode","handlers","handler","autoCompleteMode","pressedKeys","listeners","findIndex","listener","splice","removeEventListener","fn","setUpMoodleGpt","forms","querySelector","injectionFunction","bind","chrome","storage","sync","get","moodleGPT","Error","code","codeListener"],"mappings":"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","x_google_ignoreList":[1]}